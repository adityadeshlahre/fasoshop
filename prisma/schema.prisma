// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  password     String
  token        String?
  products     Product[]
  cartItems    CartItem[]
  order        Order[]
  orderHistory OrderHistory[]
}

model User {
  id       Int     @id @default(autoincrement())
  username String
  email    String  @unique
  password String
  token    String?
  cartItems    CartItem[]
  order        Order[]
  orderHistory OrderHistory[]
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  categoryId  CategoryName
  adminId      Int
  admin        Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  category     Category       @relation(fields: [categoryId], references: [name])
  cartItems    CartItem[]
  orderHistory OrderHistory[]
  order        Order[]
  @@index([categoryId], name: "CategoryIndex")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  adminId   Int?
  admin     Admin?  @relation(fields: [adminId], references: [id])
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  total     Float
  userId Int?
  user   User? @relation(fields: [userId], references: [id])
  adminId Int?
  admin   Admin? @relation(fields: [adminId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderHistory OrderHistory[]
}

model OrderHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  total     Float
  userId Int?
  user   User? @relation(fields: [userId], references: [id])
  adminId Int?
  admin   Admin? @relation(fields: [adminId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      CategoryName    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime
  products  Product[]
}

enum CategoryName {
  SHIRT
  PANTS
  JEANS
  TROUSER
  JACKETS
  CAPS
  GLASSES
  SHOES
}